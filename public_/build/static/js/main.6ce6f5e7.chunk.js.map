{"version":3,"sources":["context/GlobalState.tsx","components/Header.tsx","context/AppReducer.tsx","components/Balance.tsx","components/IncomeExpenses.tsx","components/Transaction.tsx","components/TransactionList.tsx","components/AddTransaction.tsx","firebase.js","App.tsx","service-worker.js","index.tsx"],"names":["initialState","Header","className","state","action","type","transactions","filter","transaction","id","payload","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","amounts","useContext","map","amount","console","log","total","reduce","acc","item","toFixed","IncomeExpenses","income","expense","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","messaging","requestPermission","then","getToken","token","window","alert","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6ce6f5e7.chunk.js","sourcesContent":["import React, { createContext, useReducer} from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n//Initial State\r\nvar initialState : {\r\n  transactions: any;\r\n  deleteTransaction?: any;\r\n  addTransaction?: any;\r\n}\r\n\r\n\r\ninitialState = {\r\n  transactions : [],\r\n}\r\n\r\n\r\n//create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider component\r\nexport const GlobalProvider: React.FC<any> = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    //Action\r\n    function deleteTransaction(id: number) {\r\n      dispatch({\r\n        type: 'DELETE_TRANSACTION',\r\n        payload: id\r\n      });\r\n    }\r\n\r\n    function addTransaction(transaction: any[]) {\r\n      dispatch({\r\n        type: 'ADD_TRANSACTION',\r\n        payload: transaction\r\n      });\r\n    }\r\n    \r\n    return(<GlobalContext.Provider value={{\r\n      transactions: state.transactions,\r\n      deleteTransaction,\r\n      addTransaction\r\n    }}>\r\n        {children}\r\n      </GlobalContext.Provider>\r\n    );\r\n}","import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Expense Tracker\r\n            <br/>\r\n            <h6 className='mudassar'>(By Mudassar Hanif)</h6>\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","\r\nexport default (state: any, action: any) => {\r\n    switch(action.type) {\r\n        case 'DELETE_TRANSACTION':\r\n            return{\r\n                ...state,\r\n                transactions: state.transactions.filter((transaction: any) => transaction.id !== \r\n                action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return{\r\n                ...state,\r\n                transactions: [...state.transactions, action.payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map((transaction: any) => transaction.amount);\r\n    console.log(amounts);\r\n\r\n    const total = amounts.reduce((acc: number, item: number) => (acc += item), 0).toFixed(2);\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1>Rs. {total}</h1>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const IncomeExpenses = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map((transaction: any) => transaction.amount);\r\n     const income = amounts\r\n        .filter((item: number) => item > 0)\r\n        .reduce((acc: number, item: number) => (acc += item), 0)\r\n        .toFixed(2);\r\n\r\n    const expense = (\r\n        amounts.filter((item: number) => item < 0).reduce((acc: number, item: number) => (acc += item), 0) *\r\n        -1\r\n    ).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className=\"money plus\">{income}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className=\"money minus\">{expense}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Transaction = ({ transaction }: any) => {\r\n    const {deleteTransaction}: any = useContext(GlobalContext);\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n    return (\r\n    <li className={transaction.amount < 0 ? 'minus': 'plus'}>\r\n        {transaction.text} <span>{sign}Rs.{Math.abs(transaction.amount)}</span><button \r\n        onClick= {()=> deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n    </li>\r\n    )\r\n}\r\n","import React, { useContext  } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { Transaction } from './Transaction';\r\n\r\nexport const TransactionList = () => {\r\n    const { transactions }: any = useContext(GlobalContext);\r\n    return (\r\n        <>\r\n            <h3 className='history'>History</h3>\r\n            <ul className=\"list\">\r\n                {transactions.map((transaction: any) => (<Transaction key={transaction.id } transaction={transaction}/>))}\r\n                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const AddTransaction = () => {\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const {addTransaction} = useContext(GlobalContext);\r\n\r\n    const onSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        \r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount,\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Add New Transaction</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-control\">\r\n                <label htmlFor=\"text\">Transaction detail</label>\r\n                <input type=\"text\" value={text} onChange={(e)=> setText(e.target.value)} placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                <label htmlFor=\"amount\"\r\n                    >Amount <br />\r\n                    (negative - expense, positive - income)</label\r\n                >\r\n                <input type=\"number\" value={amount} onChange={(e: any)=> setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n                </div>\r\n                <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBvq9wWdjXRUlpURdkrINbSIumo5UmIqWo\",\r\n    authDomain: \"project-7a-a36d3.firebaseapp.com\",\r\n    databaseURL: \"https://project-7a-a36d3.firebaseio.com\",\r\n    projectId: \"project-7a-a36d3\",\r\n    storageBucket: \"project-7a-a36d3.appspot.com\",\r\n    messagingSenderId: \"399684781533\",\r\n    appId: \"1:399684781533:web:c43c269bc1cecdcd026234\",\r\n    measurementId: \"G-V0BNBQX2NG\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from 'react';\nimport {Header} from './components/Header';\nimport { Balance } from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './App.css';\nimport { AddTransaction } from './components/AddTransaction';\n\nimport firebase from './firebase';\n\nfunction App() {\n  const messaging = firebase.messaging();\n  messaging.requestPermission().then(() => {\n    return messaging.getToken()\n  }).then((token) => {\n    window.alert(\"welcome to expense tracker app\");\n    // prompt(\"token\", token);\n    // console.log(\"token\", token);\n  })\n  return(\n    <GlobalProvider>\n      <Header/>\n      <div className='container'>\n        <Balance/>\n        <IncomeExpenses/>\n        <TransactionList/>\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './service-worker';\n\n\nif('serviceWorker' in navigator){\n    navigator.serviceWorker\n    .register('service-worker.js')\n    .then(registration => {\n        console.log(\"Service Worker registered!\");\n    })\n    .catch(error => {\n        console.log(\"error registering service worker! Error is:\", error);\n    });\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}